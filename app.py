import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import sqlite3
import os

# Page configuration
st.set_page_config(
    page_title="Smart Agriculture Crop Planner",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Translation dictionary
TRANSLATIONS = {
    'en': {
        'title': 'Smart Agriculture Crop Planner ЁЯМ╛',
        'subtitle': 'Plan your crops smartly with data-driven insights',
        'select_language': 'Select Language',
        'soil_type': 'Soil Type',
        'rainfall': 'Average Annual Rainfall (mm)',
        'location': 'Farm Location (State)',
        'farm_size': 'Farm Size (hectares)',
        'get_suggestions': 'Get Crop Suggestions',
        'best_crops': 'Best Crops for Your Farm',
        'crop': 'Crop',
        'expected_yield': 'Expected Yield (tons/hectare)',
        'profit': 'Estimated Profit (тВ╣/hectare)',
        'total_profit': 'Total Estimated Profit',
        'pest_risk': 'Pest Risk',
        'fertilizer': 'Recommended Fertilizer',
        'crop_cycle': 'Crop Cycle Calendar',
        'market_prices': 'Average Market Prices',
        'comparison': 'Crop Comparison',
        'price': 'Price (тВ╣/kg)',
        'select_all': 'Please select all options',
        'no_crops': 'No suitable crops found',
        'adjust': 'Try adjusting your parameters',
        'about': 'About This App',
        'about_text': 'This application helps farmers make informed decisions about crop selection based on soil type, rainfall, and location.',
        'weather_info': 'Weather Information',
        'season': 'Best Season',
        'water_req': 'Water Requirement',
        'duration': 'Growing Duration',
        'low': 'Low',
        'medium': 'Medium',
        'high': 'High',
        'export_report': 'Export Report',
        'history': 'Search History',
        'clay': 'Clay Soil',
        'sandy': 'Sandy Soil',
        'loamy': 'Loamy Soil',
        'black': 'Black Soil',
        'red': 'Red Soil',
        'alluvial': 'Alluvial Soil',
    },
    'kn': {
        'title': 'р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓Хр│Гр▓╖р▓┐ р▓мр│Жр▓│р│Ж р▓пр│Лр▓Ьр▓Х ЁЯМ╛',
        'subtitle': 'р▓бр│Зр▓Яр▓╛-р▓Жр▓зр▓╛р▓░р▓┐р▓д р▓Тр▓│р▓ир│Лр▓Яр▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Ър▓др│Бр▓░р▓╡р▓╛р▓Чр▓┐ р▓пр│Лр▓Ьр▓┐р▓╕р▓┐',
        'select_language': 'р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
        'soil_type': 'р▓ор▓гр│Нр▓гр▓┐р▓и р▓кр│Нр▓░р▓Хр▓╛р▓░',
        'rainfall': 'р▓╕р▓░р▓╛р▓╕р▓░р▓┐ р▓╡р▓╛р▓░р│Нр▓╖р▓┐р▓Х р▓ор▓│р│Ж (р▓ор▓┐р▓ор│А)',
        'location': 'р▓Ьр▓ор│Ар▓ир│Б р▓╕р│Нр▓ер▓│ (р▓░р▓╛р▓Ьр│Нр▓п)',
        'farm_size': 'р▓Ьр▓ор│Ар▓ир│Б р▓Чр▓╛р▓др│Нр▓░ (р▓╣р│Жр▓Хр│Нр▓Яр│Зр▓░р│Н)',
        'get_suggestions': 'р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐',
        'best_crops': 'р▓ир▓┐р▓ор│Нр▓о р▓Ьр▓ор│Ар▓ир▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓о р▓мр│Жр▓│р│Жр▓Чр▓│р│Б',
        'crop': 'р▓мр│Жр▓│р│Ж',
        'expected_yield': 'р▓ир▓┐р▓░р│Ар▓Хр│Нр▓╖р▓┐р▓д р▓Зр▓│р│Бр▓╡р▓░р▓┐ (р▓Яр▓ир│Н/р▓╣р│Жр▓Хр│Нр▓Яр│Зр▓░р│Н)',
        'profit': 'р▓Ер▓Вр▓жр▓╛р▓Ьр│Б р▓▓р▓╛р▓н (тВ╣/р▓╣р│Жр▓Хр│Нр▓Яр│Зр▓░р│Н)',
        'total_profit': 'р▓Тр▓Яр│Нр▓Яр│Б р▓Ер▓Вр▓жр▓╛р▓Ьр│Б р▓▓р▓╛р▓н',
        'pest_risk': 'р▓Хр│Ар▓Я р▓Ер▓кр▓╛р▓п',
        'fertilizer': 'р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓ор▓╛р▓бр▓┐р▓ж р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░',
        'crop_cycle': 'р▓мр│Жр▓│р│Ж р▓Ър▓Хр│Нр▓░ р▓Хр│Нр▓пр▓╛р▓▓р│Жр▓Вр▓бр▓░р│Н',
        'market_prices': 'р▓╕р▓░р▓╛р▓╕р▓░р▓┐ р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б',
        'comparison': 'р▓мр│Жр▓│р│Ж р▓╣р│Лр▓▓р▓┐р▓Хр│Ж',
        'price': 'р▓мр│Жр▓▓р│Ж (тВ╣/р▓Хр│Жр▓Ьр▓┐)',
        'select_all': 'р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Ор▓▓р│Нр▓▓р▓╛ р▓Жр▓пр│Нр▓Хр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Жр▓░р▓┐р▓╕р▓┐',
        'no_crops': 'р▓╕р│Вр▓Хр│Нр▓д р▓мр│Жр▓│р│Жр▓Чр▓│р│Б р▓Хр▓Вр▓бр│Бр▓мр▓Вр▓жр▓┐р▓▓р│Нр▓▓',
        'adjust': 'р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓пр▓╛р▓░р▓╛р▓ор│Ар▓Яр▓░р│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р▓░р▓┐р▓╣р│Кр▓Вр▓жр▓┐р▓╕р▓▓р│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐',
        'season': 'р▓Йр▓др│Нр▓др▓о р▓Лр▓др│Б',
        'water_req': 'р▓ир│Ар▓░р▓┐р▓и р▓Ер▓Чр▓др│Нр▓пр▓др│Ж',
        'duration': 'р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓п р▓Ер▓╡р▓зр▓┐',
        'low': 'р▓Хр▓бр▓┐р▓ор│Ж',
        'medium': 'р▓ор▓зр│Нр▓пр▓о',
        'high': 'р▓╣р│Жр▓Ър│Нр▓Ър│Б',
        'clay': 'р▓Ьр│Зр▓бр▓┐р▓ор▓гр│Нр▓гр│Б',
        'sandy': 'р▓ор▓░р▓│р│Б р▓ор▓гр│Нр▓гр│Б',
        'loamy': 'р▓▓р│Лр▓ор▓┐ р▓ор▓гр│Нр▓гр│Б',
        'black': 'р▓Хр▓кр│Нр▓кр│Б р▓ор▓гр│Нр▓гр│Б',
        'red': 'р▓Хр│Жр▓Вр▓кр│Б р▓ор▓гр│Нр▓гр│Б',
        'alluvial': 'р▓ор│Жр▓Хр│Нр▓Хр▓▓р│Б р▓ор▓гр│Нр▓гр│Б',
    },
    'ta': {
        'title': 'ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп рокропро┐ро░рпН родро┐роЯрпНроЯрооро┐роЯрпБрокро╡ро░рпН ЁЯМ╛',
        'subtitle': 'родро░ро╡рпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН рокропро┐ро░рпНроХро│рпИ родро┐роЯрпНроЯрооро┐роЯрпБроЩрпНроХро│рпН',
        'select_language': 'роорпКро┤ро┐ропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
        'soil_type': 'роорогрпН ро╡роХрпИ',
        'rainfall': 'роЪро░ро╛роЪро░ро┐ роЖрогрпНроЯрпБ рооро┤рпИ (рооро┐роорпА)',
        'location': 'рокрогрпНрогрпИ роЗроЯроорпН (рооро╛роиро┐ро▓роорпН)',
        'farm_size': 'рокрогрпНрогрпИ роЕро│ро╡рпБ (ро╣рпЖроХрпНроЯрпЗро░рпН)',
        'get_suggestions': 'рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН',
        'best_crops': 'роЙроЩрпНроХро│рпН рокрогрпНрогрпИроХрпНроХрпБ роЪро┐ро▒роирпНрод рокропро┐ро░рпНроХро│рпН',
        'crop': 'рокропро┐ро░рпН',
        'expected_yield': 'роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпН (роЯройрпН/ро╣рпЖроХрпНроЯрпЗро░рпН)',
        'profit': 'роородро┐рокрпНрокро┐роЯрокрпНрокроЯрпНроЯ ро▓ро╛рокроорпН (тВ╣/ро╣рпЖроХрпНроЯрпЗро░рпН)',
        'total_profit': 'роорпКродрпНрод роородро┐рокрпНрокро┐роЯрокрпНрокроЯрпНроЯ ро▓ро╛рокроорпН',
        'pest_risk': 'рокрпВроЪрпНроЪро┐ роЖрокродрпНродрпБ',
        'fertilizer': 'рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роЙро░роорпН',
        'crop_cycle': 'рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐ роХро╛ро▓рогрпНроЯро░рпН',
        'market_prices': 'роЪро░ро╛роЪро░ро┐ роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН',
        'comparison': 'рокропро┐ро░рпН роТрокрпНрокрпАроЯрпБ',
        'price': 'ро╡ро┐ро▓рпИ (тВ╣/роХро┐ро▓рпЛ)',
        'select_all': 'родропро╡рпБроЪрпЖропрпНродрпБ роЕройрпИродрпНродрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИропрпБроорпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
        'no_crops': 'рокрпКро░рпБродрпНродрооро╛рой рокропро┐ро░рпНроХро│рпН роЗро▓рпНро▓рпИ',
        'adjust': 'роЙроЩрпНроХро│рпН роЕро│ро╡рпБро░рпБроХрпНроХро│рпИ роЪро░ро┐роЪрпЖропрпНроп роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН',
        'season': 'роЪро┐ро▒роирпНрод рокро░рпБро╡роорпН',
        'water_req': 'роирпАро░рпН родрпЗро╡рпИ',
        'duration': 'ро╡ро│ро░рпБроорпН роХро╛ро▓роорпН',
        'low': 'роХрпБро▒рпИро╡рпБ',
        'medium': 'роироЯрпБродрпНродро░',
        'high': 'роЕродро┐роХроорпН',
        'clay': 'роХро│ро┐роорогрпН',
        'sandy': 'роорогро▓рпН роорогрпН',
        'loamy': 'роХро▓рокрпНрокрпБ роорогрпН',
        'black': 'роХро░рпБрокрпНрокрпБ роорогрпН',
        'red': 'роЪро┐ро╡рокрпНрокрпБ роорогрпН',
        'alluvial': 'ро╡рогрпНроЯро▓рпН роорогрпН',
    },
    'te': {
        'title': 'р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░Вр░Я р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░╛р░Хр░░р▒Нр░д ЁЯМ╛',
        'subtitle': 'р░бр▒Зр░Яр░╛-р░Жр░зр░╛р░░р░┐р░д р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р░др▒Л р░ор▒А р░кр░Вр░Яр░▓р░ир▒Б р░др▒Жр░▓р░┐р░╡р░┐р░Чр░╛ р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░╛р░мр░жр▒Нр░зр░В р░Ър▒Зр░пр░Вр░бр░┐',
        'select_language': 'р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
        'soil_type': 'р░ир▒Зр░▓ р░░р░Хр░В',
        'rainfall': 'р░╕р░Чр░Яр▒Б р░╡р░╛р░░р▒Нр░╖р░┐р░Х р░╡р░░р▒Нр░╖р░кр░╛р░др░В (р░ор░┐р░ор▒А)',
        'location': 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░В (р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░В)',
        'farm_size': 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░░р░┐р░ор░╛р░гр░В (р░╣р▒Жр░Хр▒Нр░Яр░╛р░░р▒Нр░▓р▒Б)',
        'get_suggestions': 'р░кр░Вр░Я р░╕р▒Вр░Ър░ир░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐',
        'best_crops': 'р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир░┐р░Хр░┐ р░Йр░др▒Нр░др░о р░кр░Вр░Яр░▓р▒Б',
        'crop': 'р░кр░Вр░Я',
        'expected_yield': 'р░Ер░Вр░Ър░ир░╛ р░жр░┐р░Чр▒Бр░мр░бр░┐ (р░Яр░ир▒Нр░▓р▒Б/р░╣р▒Жр░Хр▒Нр░Яр░╛р░░р▒Б)',
        'profit': 'р░Ер░Вр░Ър░ир░╛ р░▓р░╛р░нр░В (тВ╣/р░╣р▒Жр░Хр▒Нр░Яр░╛р░░р▒Б)',
        'total_profit': 'р░ор▒Кр░др▒Нр░др░В р░Ер░Вр░Ър░ир░╛ р░▓р░╛р░нр░В',
        'pest_risk': 'р░др▒Жр░Чр▒Бр░▓р▒Б р░кр▒Нр░░р░ор░╛р░жр░В',
        'fertilizer': 'р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░╕р░┐р░и р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б',
        'crop_cycle': 'р░кр░Вр░Я р░Ър░Хр▒Нр░░р░В р░Хр▒Нр░пр░╛р░▓р▒Жр░Вр░бр░░р▒Н',
        'market_prices': 'р░╕р░Чр░Яр▒Б р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б',
        'comparison': 'р░кр░Вр░Я р░кр▒Лр░▓р░┐р░Х',
        'price': 'р░зр░░ (тВ╣/р░Хр▒Зр░Ьр▒А)',
        'select_all': 'р░жр░пр░Ър▒Зр░╕р░┐ р░Ер░ир▒Нр░ир░┐ р░Ор░Вр░кр░┐р░Хр░▓р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
        'no_crops': 'р░др░Чр░┐р░и р░кр░Вр░Яр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б',
        'adjust': 'р░ор▒А р░кр░╛р░░р░╛р░ор░┐р░др▒Бр░▓р░ир▒Б р░╕р░░р▒Нр░жр▒Бр░мр░╛р░Яр▒Б р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐',
        'season': 'р░Йр░др▒Нр░др░о р░Хр░╛р░▓р░В',
        'water_req': 'р░ир▒Ар░Яр░┐ р░Ер░╡р░╕р░░р░В',
        'duration': 'р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░ир▒Нр░и р░╡р▒Нр░пр░╡р░зр░┐',
        'low': 'р░др░Хр▒Нр░Хр▒Бр░╡',
        'medium': 'р░ор░зр▒Нр░пр░╕р▒Нр░е',
        'high': 'р░Ор░Хр▒Нр░Хр▒Бр░╡',
        'clay': 'р░ор░Яр▒Нр░Яр░┐ р░ир▒Зр░▓',
        'sandy': 'р░Зр░╕р▒Бр░Х р░ир▒Зр░▓',
        'loamy': 'р░▓р▒Лр░ор▒А р░ир▒Зр░▓',
        'black': 'р░ир░▓р▒Нр░▓ р░ир▒Зр░▓',
        'red': 'р░Ор░░р▒Бр░кр▒Б р░ир▒Зр░▓',
        'alluvial': 'р░Тр░Вр░бр▒Нр░░р▒Б р░ир▒Зр░▓',
    },
    'ml': {
        'title': 'р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤┐р┤│ р┤Жр┤╕р╡Вр┤др╡Нр┤░р┤Хр╡╗ ЁЯМ╛',
        'subtitle': 'р┤бр┤╛р┤▒р╡Нр┤▒-р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤и р┤Йр╡╛р┤Хр╡Нр┤Хр┤╛р┤┤р╡Нр┤Ър┤Хр┤│р╡Лр┤Яр╡Ж р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤│р┤Хр╡╛ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤░р╡Ар┤др┤┐р┤пр┤┐р╡╜ р┤Жр┤╕р╡Вр┤др╡Нр┤░р┤гр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
        'select_language': 'р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
        'soil_type': 'р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤др┤░р┤В',
        'rainfall': 'р┤╢р┤░р┤╛р┤╢р┤░р┤┐ р┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤ор┤┤ (р┤ор┤┐р┤ор┤┐)',
        'location': 'р┤Хр╡Гр┤╖р┤┐р┤╕р╡Нр┤ер┤▓р┤В (р┤╕р┤Вр┤╕р╡Нр┤ер┤╛р┤ир┤В)',
        'farm_size': 'р┤Хр╡Гр┤╖р┤┐р┤╕р╡Нр┤ер┤▓ р┤╡р┤▓р╡Бр┤кр╡Нр┤кр┤В (р┤╣р╡Жр┤Хр╡Нр┤Яр╡╝)',
        'get_suggestions': 'р┤╡р┤┐р┤│ р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х',
        'best_crops': 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр╡Гр┤╖р┤┐р┤╕р╡Нр┤ер┤▓р┤др╡Нр┤др┤┐р┤ир╡Бр┤│р╡Нр┤│ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╡р┤┐р┤│р┤Хр╡╛',
        'crop': 'р┤╡р┤┐р┤│',
        'expected_yield': 'р┤кр╡Нр┤░р┤др╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤╡р┤┐р┤│р┤╡р╡Н (р┤Яр╡║/р┤╣р╡Жр┤Хр╡Нр┤Яр╡╝)',
        'profit': 'р┤Хр┤гр┤Хр╡Нр┤Хр┤╛р┤Хр╡Нр┤Хр┤┐р┤п р┤▓р┤╛р┤нр┤В (тВ╣/р┤╣р╡Жр┤Хр╡Нр┤Яр╡╝)',
        'total_profit': 'р┤Жр┤Хр╡Ж р┤Хр┤гр┤Хр╡Нр┤Хр┤╛р┤Хр╡Нр┤Хр┤┐р┤п р┤▓р┤╛р┤нр┤В',
        'pest_risk': 'р┤Хр╡Ар┤Яр┤мр┤╛р┤з р┤Ер┤кр┤Хр┤Яр┤В',
        'fertilizer': 'р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤д р┤╡р┤│р┤В',
        'crop_cycle': 'р┤╡р┤┐р┤│ р┤Ър┤Хр╡Нр┤░р┤В р┤Хр┤▓р┤гр╡Нр┤Яр╡╝',
        'market_prices': 'р┤╢р┤░р┤╛р┤╢р┤░р┤┐ р┤╡р┤┐р┤кр┤гр┤┐ р┤╡р┤┐р┤▓р┤Хр╡╛',
        'comparison': 'р┤╡р┤┐р┤│ р┤др┤╛р┤░р┤др┤ор╡Нр┤пр┤В',
        'price': 'р┤╡р┤┐р┤▓ (тВ╣/р┤Хр┤┐р┤▓р╡Л)',
        'select_all': 'р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ур┤кр╡Нр┤╖р┤ир╡Бр┤Хр┤│р╡Бр┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
        'no_crops': 'р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤ор┤╛р┤п р┤╡р┤┐р┤│р┤Хр┤│р╡Кр┤ир╡Нр┤ир╡Бр┤В р┤Зр┤▓р╡Нр┤▓',
        'adjust': 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр┤╛р┤░р┤╛р┤ор╡Ар┤▒р╡Нр┤▒р┤▒р╡Бр┤Хр╡╛ р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
        'season': 'р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╕р╡Ар┤╕р╡║',
        'water_req': 'р┤Ьр┤▓ р┤Жр┤╡р┤╢р╡Нр┤пр┤В',
        'duration': 'р┤╡р┤│р┤░р╡Бр┤ир╡Нр┤и р┤Хр┤╛р┤▓р┤пр┤│р┤╡р╡Н',
        'low': 'р┤Хр╡Бр┤▒р┤╡р╡Н',
        'medium': 'р┤Зр┤Яр┤др╡Нр┤др┤░р┤В',
        'high': 'р┤Хр╡Вр┤Яр╡Бр┤др╡╜',
        'clay': 'р┤Хр┤│р┤┐р┤ор┤гр╡Нр┤гр╡Н',
        'sandy': 'р┤ор┤гр╡╜р┤ор┤гр╡Нр┤гр╡Н',
        'loamy': 'р┤▓р╡Лр┤ор┤┐ р┤ор┤гр╡Нр┤гр╡Н',
        'black': 'р┤Хр┤▒р╡Бр┤др╡Нр┤д р┤ор┤гр╡Нр┤гр╡Н',
        'red': 'р┤Ър╡Бр┤╡р┤ир╡Нр┤и р┤ор┤гр╡Нр┤гр╡Н',
        'alluvial': 'р┤╡р╡Жр┤│р╡Нр┤│р┤кр╡Нр┤кр╡Кр┤Хр╡Нр┤Х р┤ор┤гр╡Нр┤гр╡Н',
    },
    'hi': {
        'title': 'рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рдлрд╕рд▓ рдпреЛрдЬрдирд╛рдХрд╛рд░ ЁЯМ╛',
        'subtitle': 'рдбреЗрдЯрд╛-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд╕рд╛рде рдЕрдкрдиреА рдлрд╕рд▓реЛрдВ рдХреА рдпреЛрдЬрдирд╛ рдмреБрджреНрдзрд┐рдорд╛рдиреА рд╕реЗ рдмрдирд╛рдПрдВ',
        'select_language': 'рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
        'soil_type': 'рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░',
        'rainfall': 'рдФрд╕рдд рд╡рд╛рд░реНрд╖рд┐рдХ рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)',
        'location': 'рдЦреЗрдд рдХрд╛ рд╕реНрдерд╛рди (рд░рд╛рдЬреНрдп)',
        'farm_size': 'рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рд╣реЗрдХреНрдЯреЗрдпрд░)',
        'get_suggestions': 'рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'best_crops': 'рдЖрдкрдХреЗ рдЦреЗрдд рдХреЗ рд▓рд┐рдП рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдлрд╕рд▓реЗрдВ',
        'crop': 'рдлрд╕рд▓',
        'expected_yield': 'рдЕрдкреЗрдХреНрд╖рд┐рдд рдЙрдкрдЬ (рдЯрди/рд╣реЗрдХреНрдЯреЗрдпрд░)',
        'profit': 'рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдн (тВ╣/рд╣реЗрдХреНрдЯреЗрдпрд░)',
        'total_profit': 'рдХреБрд▓ рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдн',
        'pest_risk': 'рдХреАрдЯ рдЬреЛрдЦрд┐рдо',
        'fertilizer': 'рдЕрдиреБрд╢рдВрд╕рд┐рдд рдЙрд░реНрд╡рд░рдХ',
        'crop_cycle': 'рдлрд╕рд▓ рдЪрдХреНрд░ рдХреИрд▓реЗрдВрдбрд░',
        'market_prices': 'рдФрд╕рдд рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп',
        'comparison': 'рдлрд╕рд▓ рддреБрд▓рдирд╛',
        'price': 'рдореВрд▓реНрдп (тВ╣/рдХрд┐рдЧреНрд░рд╛)',
        'select_all': 'рдХреГрдкрдпрд╛ рд╕рднреА рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ',
        'no_crops': 'рдХреЛрдИ рдЙрдкрдпреБрдХреНрдд рдлрд╕рд▓ рдирд╣реАрдВ рдорд┐рд▓реА',
        'adjust': 'рдЕрдкрдиреЗ рдкреИрд░рд╛рдореАрдЯрд░ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ',
        'season': 'рд╕рд░реНрд╡реЛрддреНрддрдо рдореМрд╕рдо',
        'water_req': 'рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛',
        'duration': 'рдмрдврд╝рдиреЗ рдХреА рдЕрд╡рдзрд┐',
        'low': 'рдХрдо',
        'medium': 'рдордзреНрдпрдо',
        'high': 'рдЙрдЪреНрдЪ',
        'clay': 'рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА',
        'sandy': 'рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА',
        'loamy': 'рджреЛрдордЯ рдорд┐рдЯреНрдЯреА',
        'black': 'рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА',
        'red': 'рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА',
        'alluvial': 'рдЬрд▓реЛрдврд╝ рдорд┐рдЯреНрдЯреА',
    }
}

# Initialize database
def init_db():
    """Initialize SQLite database with crop data"""
    conn = sqlite3.connect('agriculture.db')
    c = conn.cursor()
    
    # Create crops table
    c.execute('''CREATE TABLE IF NOT EXISTS crops
                 (id INTEGER PRIMARY KEY, 
                  name_en TEXT, name_kn TEXT, name_ta TEXT, name_te TEXT, name_ml TEXT, name_hi TEXT,
                  soil_types TEXT, min_rainfall INTEGER, max_rainfall INTEGER,
                  states TEXT, yield_per_hectare REAL, profit_per_hectare INTEGER,
                  pest_risk TEXT, fertilizer TEXT, market_price REAL,
                  season TEXT, water_requirement TEXT, duration_months INTEGER)''')
    
    # Create history table
    c.execute('''CREATE TABLE IF NOT EXISTS search_history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  timestamp TEXT, soil_type TEXT, rainfall INTEGER, location TEXT,
                  farm_size REAL, recommended_crops TEXT)''')
    
    # Check if crops table is empty
    c.execute('SELECT COUNT(*) FROM crops')
    if c.fetchone()[0] == 0:
        # Insert sample crop data
        crops_data = [
            (1, 'Rice', 'р▓Ер▓Хр│Нр▓Хр▓┐', 'роЕро░ро┐роЪро┐', 'р░╡р░░р░┐', 'р┤Ер┤░р┤┐', 'рдЪрд╛рд╡рд▓',
             'clay,loamy,alluvial', 1000, 2500, 'karnataka,tamilnadu,andhra,telangana,kerala',
             4.5, 45000, 'medium', 'Urea', 35, 'Monsoon', 'High', 5),
            
            (2, 'Wheat', 'р▓Чр│Лр▓зр▓┐', 'роХрпЛродрпБроорпИ', 'р░Чр▒Лр░зр▒Бр░о', 'р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н', 'рдЧреЗрд╣реВрдВ',
             'loamy,black,alluvial', 400, 900, 'punjab,maharashtra,karnataka',
             3.8, 40000, 'low', 'DAP', 28, 'Winter', 'Medium', 4),
            
            (3, 'Cotton', 'р▓╣р▓др│Нр▓др▓┐', 'рокро░рпБродрпНродро┐', 'р░кр░др▒Нр░др░┐', 'р┤кр┤Юр╡Нр┤Юр┤┐', 'рдХрдкрд╛рд╕',
             'black,red,alluvial', 500, 1200, 'maharashtra,karnataka,andhra,telangana',
             2.5, 65000, 'high', 'NPK', 90, 'Kharif', 'Medium', 6),
            
            (4, 'Sugarcane', 'р▓Хр▓мр│Нр▓мр│Б', 'роХро░рпБроорпНрокрпБ', 'р░Ър▒Жр░░р░Хр▒Б', 'р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н', 'рдЧрдиреНрдирд╛',
             'loamy,clay,black', 1000, 2000, 'maharashtra,karnataka,tamilnadu,andhra',
             70, 120000, 'medium', 'NPK', 3.5, 'Year-round', 'Very High', 12),
            
            (5, 'Maize', 'р▓ор│Жр▓Хр│Нр▓Хр│Ж р▓Ьр│Лр▓│', 'роЪрпЛро│роорпН', 'р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и', 'р┤Ър╡Лр┤│р┤В', 'рдордХреНрдХрд╛',
             'loamy,sandy,alluvial', 500, 1000, 'karnataka,andhra,telangana,maharashtra',
             5.5, 38000, 'low', 'Urea', 22, 'Kharif', 'Medium', 4),
            
            (6, 'Groundnut', 'р▓Хр▓бр▓▓р│Жр▓Хр▓╛р▓пр▓┐', 'роиро┐ро▓роХрпНроХроЯро▓рпИ', 'р░╡р▒Зр░░р▒Бр░╢р▒Жр░ир░Ч', 'р┤ир┤┐р┤▓р┤Хр╡Нр┤Хр┤Яр┤▓', 'рдореВрдВрдЧрдлрд▓реА',
             'sandy,red,black', 500, 1250, 'karnataka,tamilnadu,andhra,telangana',
             1.8, 52000, 'medium', 'Potash', 70, 'Kharif', 'Low', 4),
            
            (7, 'Tomato', 'р▓Яр│Кр▓ор│Зр▓Яр│К', 'родроХрпНроХро╛ро│ро┐', 'р░Яр░ор░╛р░Яр▒Л', 'р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐', 'рдЯрдорд╛рдЯрд░',
             'loamy,sandy,red', 600, 1300, 'karnataka,maharashtra,andhra,tamilnadu',
             35, 180000, 'high', 'NPK', 25, 'Winter', 'Medium', 3),
            
            (8, 'Banana', 'р▓мр▓╛р▓│р│Жр▓╣р▓гр│Нр▓гр│Б', 'ро╡ро╛ро┤рпИ', 'р░Ер░░р░Яр░┐', 'р┤╡р┤╛р┤┤р┤кр╡Нр┤кр┤┤р┤В', 'рдХреЗрд▓рд╛',
             'loamy,alluvial,clay', 1000, 2500, 'kerala,tamilnadu,karnataka,maharashtra',
             40, 250000, 'medium', 'Organic Compost', 30, 'Year-round', 'Very High', 12),
            
            (9, 'Onion', 'р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐', 'ро╡рпЖроЩрпНроХро╛ропроорпН', 'р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п', 'р┤Йр┤│р╡Нр┤│р┤┐', 'рдкреНрдпрд╛рдЬ',
             'loamy,sandy,black', 600, 1000, 'maharashtra,karnataka,andhra,tamilnadu',
             25, 95000, 'medium', 'NPK', 35, 'Rabi', 'Medium', 4),
            
            (10, 'Chilli', 'р▓ор│Жр▓гр▓╕р▓┐р▓ир▓Хр▓╛р▓пр▓┐', 'рооро┐ро│роХро╛ропрпН', 'р░ор░┐р░░р▒Нр░Ър░┐', 'р┤ор╡Бр┤│р┤Хр╡Н', 'рдорд┐рд░реНрдЪ',
             'loamy,red,black', 600, 1250, 'andhra,telangana,karnataka,tamilnadu',
             3.5, 85000, 'high', 'NPK', 120, 'Kharif', 'Medium', 5)
        ]
        
        c.executemany('''INSERT INTO crops VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)''', crops_data)
        conn.commit()
    
    conn.close()

# Load crop data from database
@st.cache_data
def load_crops():
    """Load crops from database"""
    conn = sqlite3.connect('agriculture.db')
    df = pd.read_sql_query("SELECT * FROM crops", conn)
    conn.close()
    return df

# Save search to history
def save_to_history(soil_type, rainfall, location, farm_size, crops):
    """Save search parameters to history"""
    conn = sqlite3.connect('agriculture.db')
    c = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    crop_names = ", ".join([c for c in crops])
    c.execute('''INSERT INTO search_history (timestamp, soil_type, rainfall, location, farm_size, recommended_crops)
                 VALUES (?, ?, ?, ?, ?, ?)''', (timestamp, soil_type, rainfall, location, farm_size, crop_names))
    conn.commit()
    conn.close()

# Recommend crops based on inputs
def recommend_crops(df, soil_type, rainfall, location):
    """Filter and recommend crops based on farmer inputs"""
    filtered = df[
        (df['soil_types'].str.contains(soil_type, na=False)) &
        (df['min_rainfall'] <= rainfall) &
        (df['max_rainfall'] >= rainfall) &
        (df['states'].str.contains(location, na=False))
    ]
    return filtered.sort_values('profit_per_hectare', ascending=False)

# Custom CSS
def load_css():
    st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stButton>button {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px;
        font-size: 18px;
        font-weight: bold;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
    div[data-testid="stMetricValue"] {
        font-size: 28px;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

# Main app
def main():
    # Initialize database
    init_db()
    
    # Load CSS
    load_css()
    
    # Initialize session state
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    
    # Sidebar for language selection and settings
    with st.sidebar:
        st.image("https://cdn-icons-png.flaticon.com/512/628/628283.png", width=100)
        st.title("ЁЯМ╛ Settings")
        
        # Language selector
        lang_options = {
            'English': 'en',
            'р▓Хр▓ир│Нр▓ир▓б (Kannada)': 'kn',
            'родрооро┐ро┤рпН (Tamil)': 'ta',
            'р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)': 'te',
            'р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)': 'ml',
            'рд╣рд┐рдВрджреА (Hindi)': 'hi'
        }
        
        selected_lang = st.selectbox(
            "ЁЯМР Select Language / р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
            options=list(lang_options.keys()),
            index=0
        )
        st.session_state.language = lang_options[selected_lang]
        
        st.markdown("---")
        
        # About section
        with st.expander("тД╣я╕П About"):
            st.write("""
            This Smart Agriculture Crop Planner helps farmers make informed decisions about crop selection.
            
            **Features:**
            - Multi-language support
            - Crop recommendations
            - Profit calculations
            - Pest risk analysis
            - Market price insights
            - Search history tracking
            """)
        
        st.markdown("---")
        st.info("ЁЯТб Tip: Use the sliders and dropdowns for easy input!")
    
    # Get translations for selected language
    t = TRANSLATIONS[st.session_state.language]
    
    # Header
    st.title(t['title'])
    st.markdown(f"**{t['subtitle']}**")
    st.markdown("---")
    
    # Load crop database
    crops_df = load_crops()
    
    # Input form
    col1, col2, col3 = st.columns(3)
    
    with col1:
        soil_options = {
            t['clay']: 'clay',
            t['sandy']: 'sandy',
            t['loamy']: 'loamy',
            t['black']: 'black',
            t['red']: 'red',
            t['alluvial']: 'alluvial'
        }
        soil_type_display = st.selectbox(
            f"ЁЯПЮя╕П {t['soil_type']}",
            options=list(soil_options.keys())
        )
        soil_type = soil_options[soil_type_display]
    
    with col2:
        state_options = {
            'Karnataka / р▓Хр▓░р│Нр▓ир▓╛р▓Яр▓Х': 'karnataka',
            'Tamil Nadu / родрооро┐ро┤рпНроиро╛роЯрпБ': 'tamilnadu',
            'Andhra Pradesh / р░Жр░Вр░зр▒Нр░░р░кр▒Нр░░р░жр▒Зр░╢р▒Н': 'andhra',
            'Telangana / р░др▒Жр░▓р░Вр░Чр░╛р░г': 'telangana',
            'Kerala / р┤Хр╡Зр┤░р┤│р┤В': 'kerala',
            'Maharashtra / рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░': 'maharashtra',
            'Punjab / рикрй░риЬри╛рим': 'punjab'
        }
        location_display = st.selectbox(
            f"ЁЯУН {t['location']}",
            options=list(state_options.keys())
        )
        location = state_options[location_display]
    
    with col3:
        farm_size = st.number_input(
            f"ЁЯУП {t['farm_size']}",
            min_value=0.1,
            max_value=100.0,
            value=1.0,
            step=0.5
        )
    
    # Rainfall slider
    st.markdown(f"### ЁЯМзя╕П {t['rainfall']}")
    rainfall = st.slider("", min_value=200, max_value=3000, value=800, step=50)
    st.info(f"Selected: **{rainfall} mm**")
    
    st.markdown("---")
    
    # Get recommendations button
    if st.button(f"ЁЯФН {t['get_suggestions']}", use_container_width=True):
        with st.spinner('ЁЯМ▒ Finding best crops for you...'):
            recommended = recommend_crops(crops_df, soil_type, rainfall, location)
            
            if len(recommended) > 0:
                # Save to history
                crop_names = recommended[f'name_{st.session_state.language}'].tolist()
                save_to_history(soil_type, rainfall, location, farm_size, crop_names)
                
                # Display results
                st.success(f"тЬЕ Found {len(recommended)} suitable crops!")
                st.markdown(f"## ЁЯМ╛ {t['best_crops']}")
                
                # Display crop cards
                for idx, row in recommended.head(4).iterrows():
                    with st.expander(f"ЁЯМ▒ {row[f'name_{st.session_state.language}']} - тВ╣{int(row['profit_per_hectare'] * farm_size):,}", expanded=True):
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric(
                                t['expected_yield'],
                                f"{row['yield_per_hectare']} t/ha"
                            )
                        
                        with col2:
                            st.metric(
                                t['profit'],
                                f"тВ╣{row['profit_per_hectare']:,}"
                            )
                        
                        with col3:
                            risk_color = {"low": "ЁЯЯв", "medium": "ЁЯЯб", "high": "ЁЯФ┤"}
                            st.metric(
                                t['pest_risk'],
                                f"{risk_color.get(row['pest_risk'], 'тЪк')} {t[row['pest_risk']]}"
                            )
                        
                        with col4:
                            st.metric(
                                t['duration'],
                                f"{row['duration_months']} months"
                            )
                        
                        # Additional info
                        col5, col6, col7 = st.columns(3)
                        
                        with col5:
                            st.write(f"**{t['fertilizer']}:** {row['fertilizer']}")
                        
                        with col6:
                            st.write(f"**{t['season']}:** {row['season']}")
                        
                        with col7:
                            st.write(f"**{t['water_req']}:** {row['water_requirement']}")
                        
                        # Total profit calculation
                        total_profit = row['profit_per_hectare'] * farm_size
                        st.success(f"ЁЯТ░ {t['total_profit']}: **тВ╣{int(total_profit):,}** (for {farm_size} hectares)")
                
                st.markdown("---")
                
                # Visualizations
                st.markdown(f"## ЁЯУК {t['comparison']}")
                
                tab1, tab2, tab3 = st.tabs(["ЁЯУИ Profit Comparison", "ЁЯМ╛ Yield Comparison", "ЁЯТ╡ Market Prices"])
                
                with tab1:
                    # Profit bar chart
                    fig_profit = px.bar(
                        recommended.head(5),
                        x=f'name_{st.session_state.language}',
                        y='profit_per_hectare',
                        title=f"{t['profit']} - Top 5 Crops",
                        labels={f'name_{st.session_state.language}': t['crop'], 'profit_per_hectare': t['profit']},
                        color='profit_per_hectare',
                        color_continuous_scale='viridis'
                    )
                    fig_profit.update_layout(showlegend=False, height=400)
                    st.plotly_chart(fig_profit, use_container_width=True)
                
                with tab2:
                    # Yield comparison
                    fig_yield = px.bar(
                        recommended.head(5),
                        x=f'name_{st.session_state.language}',
                        y='yield_per_hectare',
                        title=f"{t['expected_yield']} - Top 5 Crops",
                        labels={f'name_{st.session_state.language}': t['crop'], 'yield_per_hectare': t['expected_yield']},
                        color='yield_per_hectare',
                        color_continuous_scale='greens'
                    )
                    fig_yield.update_layout(showlegend=False, height=400)
                    st.plotly_chart(fig_yield, use_container_width=True)
                
                with tab3:
                    # Market prices
                    fig_price = px.bar(
                        recommended.head(5),
                        x=f'name_{st.session_state.language}',
                        y='market_price',
                        title=f"{t['market_prices']} - Top 5 Crops",
                        labels={f'name_{st.session_state.language}': t['crop'], 'market_price': t['price']},
                        color='market_price',
                        color_continuous_scale='blues'
                    )
                    fig_price.update_layout(showlegend=False, height=400)
                    st.plotly_chart(fig_price, use_container_width=True)
                
                # Pest risk distribution
                st.markdown("### ЁЯРЫ Pest Risk Distribution")
                risk_counts = recommended['pest_risk'].value_counts()
                fig_risk = px.pie(
                    values=risk_counts.values,
                    names=[t[risk] for risk in risk_counts.index],
                    title=t['pest_risk'],
                    color_discrete_sequence=['#10b981', '#f59e0b', '#ef4444']
                )
                st.plotly_chart(fig_risk, use_container_width=True)
                
                # Export report
                st.markdown("---")
                st.markdown("### ЁЯУе Export Report")
                
                # Create CSV for export
                export_df = recommended[[f'name_{st.session_state.language}', 'yield_per_hectare', 
                                        'profit_per_hectare', 'pest_risk', 'fertilizer', 'market_price']].head(10)
                csv = export_df.to_csv(index=False)
                
                st.download_button(
                    label="ЁЯУД Download Crop Report (CSV)",
                    data=csv,
                    file_name=f"crop_recommendations_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
                
            else:
                st.warning(f"тЪая╕П {t['no_crops']}")
                st.info(f"ЁЯТб {t['adjust']}")
    
    # Search history
    st.markdown("---")
    with st.expander("ЁЯУЬ View Search History"):
        conn = sqlite3.connect('agriculture.db')
        history_df = pd.read_sql_query("SELECT * FROM search_history ORDER BY id DESC LIMIT 10", conn)
        conn.close()
        
        if len(history_df) > 0:
            st.dataframe(history_df[['timestamp', 'soil_type', 'rainfall', 'location', 'recommended_crops']], 
                        use_container_width=True)
        else:
            st.info("No search history yet. Start by getting crop recommendations!")

if __name__ == "__main__":
    main()